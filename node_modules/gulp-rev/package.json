{
  "name": "gulp-rev",
  "version": "0.4.1",
  "description": "Static asset revisioning by appending content hash to filenames: unicorn.css => unicorn-098f6bcd.css",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/sindresorhus/gulp-rev"
  },
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "http://sindresorhus.com"
  },
  "maintainers": [
    {
      "name": "Justin Hileman",
      "email": "justin@justinhileman.info",
      "url": "http://justinhileman.info"
    }
  ],
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "files": [
    "index.js"
  ],
  "keywords": [
    "gulpplugin",
    "rev",
    "revision",
    "hash",
    "optimize",
    "version",
    "versioning",
    "cache",
    "expire",
    "static",
    "asset",
    "assets"
  ],
  "dependencies": {
    "gulp-util": "~2.2.9",
    "through2": "~0.5.1"
  },
  "devDependencies": {
    "mocha": "*"
  },
  "readme": "# [gulp](https://github.com/wearefractal/gulp)-rev [![Build Status](https://travis-ci.org/sindresorhus/gulp-rev.svg?branch=master)](https://travis-ci.org/sindresorhus/gulp-rev)\n\n> Static asset revisioning by appending content hash to filenames\n`unicorn.css` → `unicorn-098f6bcd.css`\n\nMake sure to set the files to [never expire](http://developer.yahoo.com/performance/rules.html#expires) for this to have an effect.\n\n\n## Install\n\n```sh\n$ npm install --save-dev gulp-rev\n```\n\n\n## Usage\n\n```js\nvar gulp = require('gulp');\nvar rev = require('gulp-rev');\n\ngulp.task('default', function () {\n\treturn gulp.src('src/*.css')\n\t\t.pipe(rev())\n\t\t.pipe(gulp.dest('dist'));\n});\n```\n\n*Options are intentionally missing as the default should work in most cases.*\n\n\n### Original path\n\nOriginal file paths are stored at `file.revOrigPath`. This could come in handy for things like rewriting references to the assets.\n\n\n### Asset hash\n\nThe hash of each rev'd file is stored at `file.revHash`. You can use this for customizing the file renaming, or for building different manifest formats.\n\n\n### Asset manifest\n\n```js\nvar gulp = require('gulp');\nvar rev = require('gulp-rev');\n\ngulp.task('default', function () {\n\t// by default, gulp would pick `assets/css` as the base,\n\t// so we need to set it explicitly:\n\treturn gulp.src(['assets/css/*.css', 'assets/js/*.js'], {base: 'assets'})\n\t\t.pipe(gulp.dest('build/assets'))  // copy original assets to build dir\n\t\t.pipe(rev())\n\t\t.pipe(gulp.dest('build/assets'))  // write rev'd assets to build dir\n\t\t.pipe(rev.manifest())\n\t\t.pipe(gulp.dest('build/assets')); // write manifest to build dir\n});\n```\n\nAn asset manifest, mapping the original paths to the revisioned paths, will be written to `dist/rev-manifest.json`:\n\n```json\n{\n\t\"css/unicorn.css\": \"css/unicorn-098f6bcd.css\"\n}\n```\n\n### Integration\n\nFor more info on how to integrate **gulp-rev** into your app, have a look at the [integration guide](integration.md).\n\n\n## License\n\n[MIT](http://opensource.org/licenses/MIT) © [Sindre Sorhus](http://sindresorhus.com)\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/sindresorhus/gulp-rev/issues"
  },
  "_id": "gulp-rev@0.4.1",
  "_from": "gulp-rev@"
}
